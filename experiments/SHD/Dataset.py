from pathlib import Path
from typing import Tuple

import numpy as np

N_NEURONS = 700
MAX_SPIKE = 91  # Maximum of spike generated by an input neuron


class Dataset:
    def __init__(self, path: Path, n_samples: int = None):
        self._spn = np.load(path / "spn.npy", mmap_mode="r")
        self._nspn = np.load(path / "nspn.npy", mmap_mode="r")
        self._labels = np.load(path / "labels.npy", mmap_mode="r")
        self._indices = np.arange(len(self._labels))

        """n_samples = sum([len(list((path / str(i)).glob("*.npz"))) for i in range(20)])
        self._spn = np.empty((n_samples, N_NEURONS, MAX_SPIKE), dtype=np.float32)
        self._nspn = np.empty((n_samples, N_NEURONS), dtype=np.int32)
        self._labels = np.empty((0,), dtype=np.int32)

        idx = 0
        for i in range(20):
            print(i)
            samples = list((path / str(i)).glob("*.npz"))
            for it in samples:
                spn, nspn = self.__load_spike_file(it)
                self._spn[idx] = spn
                self._nspn[idx] = nspn
                idx += 1
            self._labels = np.append(self._labels, np.full((len(samples)), i, dtype=np.int32))

        np.save(path / "spn.npy", self._spn)
        np.save(path / "nspn.npy", self._nspn)
        np.save(path / "labels.npy", self._labels)"""

    def __load_spike_file(self, filename):
        data = np.load(filename)

        spikes_per_neuron = data["spikes_per_neuron"]
        n_spikes_per_neuron = data["n_spikes_per_neuron"]
        return spikes_per_neuron, n_spikes_per_neuron

    @property
    def labels(self) -> np.ndarray:
        return self._labels

    def shuffle(self) -> None:
        np.random.shuffle(self._indices)

    def get_batch(self, batch_index, batch_size) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
        spikes_per_neuron = np.empty((batch_size, N_NEURONS, MAX_SPIKE))
        n_spikes_per_neuron = np.empty((batch_size, N_NEURONS), dtype=np.int)
        labels = np.empty((batch_size,), dtype=np.int)

        start = batch_index * batch_size
        end = start + batch_size

        for i, idx in enumerate(self._indices[start:end]):
            spikes_per_neuron[i] = self._spn[idx]
            n_spikes_per_neuron[i] = self._nspn[idx]
            labels[i] = self._labels[idx]

        return spikes_per_neuron, n_spikes_per_neuron, labels

